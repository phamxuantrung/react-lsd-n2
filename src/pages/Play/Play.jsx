import classNames from "classnames/bind";
import { useState } from "react";
import { CodeIcon } from "../../assets/icons";
import styles from "./Play.module.scss";

import correctSound from "../../assets/sounds/correct.mp3";
import failSound from "../../assets/sounds/fail.mp3";
import luckySound from "../../assets/sounds/lucky.mp3";
import unluckySound from "../../assets/sounds/unlucky.mp3";
import doneSound from "../../assets/sounds/done.mp3";
import luckyGif from "../../assets/images/lucky.gif";
import unluckyGif from "../../assets/images/unlucky.gif";
import doneGif from "../../assets/images/done.gif";
import { Link } from "react-router-dom";
const cx = classNames.bind(styles);

const key = "1234";
const questions = [
    {
        box: "normal",
        quiz: "N·ªôi dung n√†o sau ƒë√¢y m√¥ t·∫£ ƒë√∫ng nh·∫•t th√†nh t·ª±u l√£nh ƒë·∫°o c·ªßa ƒê·∫£ng trong vi·ªác x√¢y d·ª±ng h·ªá th·ªëng kinh t·∫ø ƒë·ªãnh h∆∞·ªõng x√£ h·ªôi ch·ªß nghƒ©a v·ªÅ n√¢ng cao d√¢n tr√≠ trong ph√°t tri·ªÉn kinh t·∫ø v√† ho√†n thi·ªán th·ªÉ ch·∫ø kinh t·∫ø trong n·ªÅn kinh t·∫ø ho√†n thi·ªán c·ªßa n∆∞·ªõc ta?",
        ans: [
            "A: ƒê·∫£ng ƒë√£ c√≥ nh·ªØng b∆∞·ªõc ph√°t tri·ªÉn v∆∞·ª£t b·∫≠c tr√™n c·∫£ hai m·∫∑t, ƒë·∫©y m·∫°nh ƒë·ªïi m·ªõi, t·ªëi ∆∞u h√≥a th·ªÉ ch·∫ø kinh t·∫ø ƒë·ªÉ th√∫c ƒë·∫©y tƒÉng tr∆∞·ªüng kinh t·∫ø b·ªÅn v·ªØng, ch·∫•t l∆∞·ª£ng cao.",
            "B: ƒê·∫£ng ƒë√£ ƒë·∫°t ƒë∆∞·ª£c th√†nh c√¥ng v·ª´a ph·∫£i, v·ªõi m·ªôt s·ªë c·∫£i thi·ªán v·ªÅ nƒÉng l·ª±c tr√≠ tu·ªá v√† khu√¥n kh·ªï th·ªÉ ch·∫ø, nh∆∞ng ph·∫£i ƒë·ªëi m·∫∑t v·ªõi nh·ªØng th√°ch th·ª©c nh∆∞ thi·∫øu ƒë·ªïi m·ªõi v√† nhu c·∫ßu c·∫£i c√°ch h∆°n n·ªØa.",
            "C: Nh·ªØng n·ªó l·ª±c c·ªßa ƒê·∫£ng ƒë·∫°t ƒë∆∞·ª£c th√†nh c√¥ng h·∫°n ch·∫ø trong c√°c lƒ©nh v·ª±c n√†y, √≠t c·∫£i thi·ªán ƒë√°ng k·ªÉ v·ªÅ tr√≠ tu·ªá v√† th·ªÉ ch·∫ø, c·∫£n tr·ªü s·ª± tƒÉng tr∆∞·ªüng c·ªßa n·ªÅn kinh t·∫ø.",
            "D: S·ª± l√£nh ƒë·∫°o c·ªßa ƒê·∫£ng ch∆∞a n√¢ng cao ƒë∆∞·ª£c tr√≠ tu·ªá v√† th·ªÉ ch·∫ø trong ph√°t tri·ªÉn kinh t·∫ø, d·∫´n ƒë·∫øn tƒÉng tr∆∞·ªüng ch·∫≠m v√† chuy·ªÉn d·ªãch c∆° c·∫•u n·ªÅn kinh t·∫ø ch∆∞a t∆∞∆°ng x·ª©ng.",
        ],
        corI: 0,
    },
    {
        box: "normal",
        quiz: "Vi·ªát Nam l√† th√†nh vi√™n th·ª© m·∫•y c·ªßa WTO?",
        ans: ["A: 150", "B: 151", "C: 152", "D: 153"],
        corI: 0,
    },
    {
        box: "normal",
        quiz: "V·∫•n ƒë·ªÅ n√†o ƒë∆∞·ª£c xem l√† n·ªôi dung ho√†n thi·ªán th·ªÉ ch·∫ø kinh t·∫ø th·ªã tr∆∞·ªùng ƒë·ªãnh h∆∞·ªõng x√£ h·ªôi ch·ªß nghƒ©a ·ªü Vi·ªát Nam?",
        ans: ["A: Ho√†n thi·ªán th·ªÉ ch·∫ø ƒë·ªÉ ph√°t tri·ªÉn ƒë·ªìng b·ªô c√°c y·∫øu t·ªë th·ªã tr∆∞·ªùng v√† c√°c lo·∫°i th·ªã tr∆∞·ªùng.", "B: Ho√†n thi·ªán th·ªÉ ch·∫ø v·ªÅ s·ªü h·ªØu v√† ph√°t tri·ªÉn c√°c th√†nh ph·∫ßn kinh t·∫ø.", "C: Ho√†n thi·ªán th·ªÉ ch·∫ø ƒë·ªÉ ƒë·∫£m b·∫£o g·∫Øn tƒÉng tr∆∞·ªüng kinh t·∫ø v·ªõi b·∫£o ƒë·∫£m ti·∫øn b·ªô v√† c√¥ng b·∫±ng x√£ h·ªôi.", "D: T·∫•t c·∫£ ƒë√°p √°n tr√™n ƒë·ªÅu ƒë√∫ng."],
        corI: 3,
    },
    {
        box: "normal",
        quiz: "N·ªÅn kinh t·∫ø th·ªã tr∆∞·ªùng ƒë·ªãnh h∆∞·ªõng x√£ h·ªôi ch·ªß nghƒ©a ·ªü Vi·ªát Nam, ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c h·ªá gi√° tr·ªã to√†n di·ªán g·ªìm c·∫£ d√¢n gi√†u, n∆∞·ªõc m·∫°nh, x√£ h·ªôi d√¢n ch·ªß, c√¥ng b·∫±ng, vƒÉn minh th√¨ c·∫ßn y·∫øu t·ªë n√†o?",
        ans: ["A: Trong x√£ h·ªôi kh√¥ng c√≤n m√¢u thu·∫´n gi·ªØa c√°c t·∫ßng l·ªõp d√¢n c∆∞.", "B: S·ª± h·ª£p t√°c v√† h·ªó tr·ª£ t·ª´ c√°c n∆∞·ªõc trong h·ªá th·ªëng Ch·ªß nghƒ©a x√£ h·ªôi.", "C: Vai tr√≤ ƒëi·ªÅu ti·∫øt c·ªßa nh√† n∆∞·ªõc d∆∞·ªõi s·ª± l√£nh ƒë·∫°o c·ªßa ƒê·∫£ng c·ªông s·∫£n.", "D: Ng√¢n s√°ch Nh√† N∆∞·ªõc ph·∫£i ƒë·ªß m·∫°nh ƒë·ªÉ th·ª±c hi·ªán c√°c ch√≠nh s√°ch ph√∫c l·ª£i."],
        corI: 2,
    },
    {
        box: "normal",
        quiz: "Th√†nh ph·∫ßn kinh t·∫ø nh√† n∆∞·ªõc gi·ªØ vai tr√≤ g√¨ trong n·ªÅn kinh t·∫ø th·ªã tr∆∞·ªùng ƒë·ªãnh h∆∞·ªõng x√£ h·ªôi ch·ªß nghƒ©a ·ªü n∆∞·ªõc ta?",
        ans: ["A: Gi·ªØ vai tr√≤ quan tr·ªçng.", "B: Gi·ªØ vai tr√≤ ch·ªß ƒë·∫°o.", "C: Gi·ªØ vai tr√≤ x√∫c t√°c.", "D: Gi·ªØ vai tr√≤ th·ªëng tr·ªã."],
        corI: 1,
    },
    {
        box: "lucky",
    },
    {
        box: "lucky",
    },
    {
        box: "unlucky",
    },
    {
        box: "unlucky",
    },
];

function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
        let j = Math.floor(Math.random() * (i + 1));
        let temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}

shuffle(questions);

function Play() {
    const [success, setSuccess] = useState(false);
    const [answered, setAnswered] = useState([]);
    const [currentQues, setCurrentQues] = useState(null);
    const [checked, setChecked] = useState(false);

    function handleClickPass() {
        let val = document.getElementById("input")?.value.toLowerCase();
        if (val !== key) {
            document.getElementById("input").style.borderColor = "#dc3545";
            document.getElementById("input").style.background =
                "rgba(220, 53, 70, 0.3)";
            document.querySelector("span").style.borderColor = "#dc3545";
            document.querySelector("span").style.background =
                "rgba(220, 53, 70, 0.3)";
            return;
        }
        if (window.location.href.includes("pick-lucky")) setSuccess(true);
    }

    function handleKeyDown(e) {
        if (e.which === 13) handleClickPass();
    }

    function handleClickItemGame(ques, index) {
        let ans = [...answered];
        if (!ans.includes(index)) ans.push(index);
        setAnswered(ans);
        setCurrentQues(ques);
        setChecked(false);
        if (ques.box === "lucky") document.getElementById("lucky-sound").play();
        if (ques.box === "unlucky")
            document.getElementById("unlucky-sound").play();
    }

    function handleChooseAns(currentQues, index, element) {
        if (checked) return;
        setChecked(true);
        element.classList.add(`${cx("choose-current")}`);
        if (currentQues.corI === index) {
            document.getElementById("correct-sound").play();
        } else {
            document.getElementById("fail-sound").play();
        }
    }

    document.title = "Tr√≤ ch∆°i";

    return (
        <div className={cx("wrapper")}>
            {success ? (
                <div className={cx("game")}>
                    {questions.map((ques, index) => {
                        if (!answered.includes(index))
                            return (
                                <div
                                    className={cx(
                                        "item",
                                        { bg1: index % 2 === 0 },
                                        { bg2: index % 2 === 1 }
                                    )}
                                    key={index}
                                    onClick={() =>
                                        handleClickItemGame(ques, index)
                                    }
                                >
                                    {index + 1}
                                </div>
                            );
                        else
                            return (
                                <div
                                    className={cx("item-answered")}
                                    key={index}
                                    onClick={() =>
                                        handleClickItemGame(ques, index)
                                    }
                                >
                                    {index + 1}
                                </div>
                            );
                    })}
                    {currentQues && (
                        <div className={cx("current-ques")}>
                            <div className={cx("panel")}>
                                <div style={{ position: "relative" }}>
                                    {currentQues.box === "normal" && (
                                        <div className={cx("heading")}>
                                            C√¢u h·ªèi
                                        </div>
                                    )}
                                    {currentQues.box === "lucky" && (
                                        <div className={cx("heading")}>
                                            √î may m·∫Øn
                                        </div>
                                    )}
                                    {currentQues.box === "unlucky" && (
                                        <div className={cx("heading")}>
                                            M·∫•t l∆∞·ª£t r·ªìi üòû
                                        </div>
                                    )}
                                    <div
                                        className={cx("close")}
                                        onClick={() => {
                                            setCurrentQues(null);
                                            if (
                                                answered.length ===
                                                questions.length
                                            )
                                                document
                                                    .getElementById(
                                                        "done-sound"
                                                    )
                                                    .play();
                                        }}
                                    >
                                        √ó
                                    </div>
                                </div>
                                <div className={cx("body")}>
                                    {currentQues.box === "normal" && (
                                        <div
                                            style={{
                                                padding:
                                                    "1vmin 1vmin 1.5vmin 1vmin",
                                                backgroundColor: "#f8f4fb",
                                                borderRadius: "0 0 1vmin 1vmin",
                                            }}
                                        >
                                            <div className={cx("quiz")}>
                                                {currentQues.quiz}
                                            </div>
                                            <div
                                                className={cx("answer", {
                                                    checked: checked,
                                                })}
                                            >
                                                {currentQues.ans.map(
                                                    (ans, index) => {
                                                        let bg = "#fff";
                                                        if (
                                                            checked &&
                                                            currentQues.corI ===
                                                                index
                                                        )
                                                            bg = "#2ebe4e";
                                                        if (
                                                            checked &&
                                                            currentQues.corI !==
                                                                index
                                                        )
                                                            bg = "#fb3d5f";
                                                        return (
                                                            <div
                                                                key={index}
                                                                style={{
                                                                    background: `${bg}`,
                                                                }}
                                                                onClick={(e) =>
                                                                    handleChooseAns(
                                                                        currentQues,
                                                                        index,
                                                                        e.target
                                                                    )
                                                                }
                                                            >
                                                                {ans}
                                                            </div>
                                                        );
                                                    }
                                                )}
                                            </div>
                                        </div>
                                    )}

                                    {currentQues.box === "lucky" && (
                                        <div className={cx("lucky-number")}>
                                            <img src={luckyGif} alt="" />
                                        </div>
                                    )}

                                    {currentQues.box === "unlucky" && (
                                        <div className={cx("unlucky-number")}>
                                            <img src={unluckyGif} alt="" />
                                        </div>
                                    )}
                                </div>
                            </div>
                            <div
                                className={cx("overlay")}
                                onClick={() => {
                                    setCurrentQues(null);
                                }}
                            ></div>
                        </div>
                    )}
                    {answered.length === questions.length &&
                        currentQues === null && (
                            <div className={cx("done")}>
                                <img src={doneGif} alt="" />
                                <Link to={"/game"}>
                                    <div>Quay v·ªÅ ‚ûú</div>
                                </Link>
                            </div>
                        )}
                </div>
            ) : (
                <div className={cx("password")}>
                    <div className={cx("box")}>
                        <h1>Nh·∫≠p m·∫≠t kh·∫©u</h1>
                        <div style={{ display: "flex" }}>
                            <span>
                                <CodeIcon className={cx("icon")} />
                            </span>
                            <input
                                placeholder="Nh·∫≠p m·∫≠t kh·∫©u ·ªü ƒë√¢y"
                                id="input"
                                type="password"
                                onKeyDown={handleKeyDown}
                            />
                        </div>
                        <div className={cx("btn")} onClick={handleClickPass}>
                            Xong
                        </div>
                    </div>
                </div>
            )}
            <audio id="correct-sound" src={correctSound}></audio>
            <audio id="fail-sound" src={failSound}></audio>
            <audio id="lucky-sound" src={luckySound}></audio>
            <audio id="unlucky-sound" src={unluckySound}></audio>
            <audio id="done-sound" src={doneSound}></audio>
        </div>
    );
}

export default Play;
